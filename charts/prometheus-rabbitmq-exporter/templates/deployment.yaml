apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "prometheus-rabbitmq-exporter.fullname" . }}
  labels:
    app: {{ template "prometheus-rabbitmq-exporter.name" . }}
    chart: {{ template "prometheus-rabbitmq-exporter.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  {{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "prometheus-rabbitmq-exporter.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "prometheus-rabbitmq-exporter.name" . }}
        release: {{ .Release.Name }}
        {{- if .Values.podLabels }}
{{ toYaml .Values.podLabels | indent 8 }}
        {{- end }}
      annotations:
{{ toYaml .Values.annotations | indent 8 }}
    spec:
    {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.image.pullSecrets }}
        - name: {{ . }}
      {{- end }}
    {{- end }}
      serviceAccountName: {{ template "prometheus-rabbitmq-exporter.serviceAccountName" . }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ template "prometheus-rabbitmq-exporter.configMapName" . }}
          {{- if .Values.rabbitmq.configMapOverrideReference }}
            - configMapRef:
               name: {{ tpl .Values.rabbitmq.configMapOverrideReference . }}
          {{- end }}                
          env:
<<<<<<< HEAD
            - name: RABBIT_URL
              value: "{{ tpl .Values.rabbitmq.url . }}"
            - name: RABBIT_USER
              value: "{{ .Values.rabbitmq.user }}"
=======
>>>>>>> f3471fec (allow rabbitmq env vars to be overriden by supplying an external configmap)
            {{- if .Values.rabbitmq.existingPasswordSecret }}
            - name: RABBIT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name:  "{{ .Values.rabbitmq.existingPasswordSecret }}"
                  key: {{ .Values.rabbitmq.existingPasswordSecretKey }}
            {{- else }}
            - name: RABBIT_PASSWORD
              value: "{{ .Values.rabbitmq.password }}"
            {{- end }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
              name: publish
          livenessProbe:
            httpGet:
              path: /
              port: publish
          readinessProbe:
            httpGet:
              path: /
              port: publish
          resources:
{{ toYaml .Values.resources | indent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["all"]
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10002
    {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
